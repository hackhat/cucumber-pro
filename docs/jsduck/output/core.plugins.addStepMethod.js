Ext.data.JsonP.core_plugins_addStepMethod({"tagname":"class","name":"core.plugins.addStepMethod","autodetected":{},"files":[{"filename":"addStepMethod.js","href":"addStepMethod.html#core-plugins-addStepMethod"}],"params":[{"tagname":"params","type":"*","name":"target","doc":"<p>The context of the test function which has the <code>.Given</code> methods.</p>\n","html_type":"*"}],"members":[],"alternateClassNames":[],"aliases":{},"id":"class-core.plugins.addStepMethod","short_doc":"You can now call a step from another step. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/addStepMethod.html#core-plugins-addStepMethod' target='_blank'>addStepMethod.js</a></div></pre><div class='doc-contents'><p>You can now call a step from another step.\nAdds a <code>addStep</code> method to the test context. These\ntests can later be called by the world with <code>callStep</code>.</p>\n\n<p>The <code>addStep</code> method now accept another extra argument. The first\none is the unique step name.</p>\n\n<pre><code>this.addStep(uniqueStepName, regexp, function);\n</code></pre>\n\n<p>Example of steps definition:</p>\n\n<pre><code>// all.steps.js\nthis.addStep('a', /^a$/, function(){\n    console.log('a')\n    this.callStep('b', 1);\n})\nthis.addStep('b', /^b (\\d+)$/, function(n){\n    console.log('b', n)\n})\n\n// test.feature\nFeature: Test\n\nScenario: Test\n    Given a\n    Given b 2\n</code></pre>\n\n<p>Will log:</p>\n\n<pre><code>a    // From a called from the test.feature directly\nb 1  // From b but called by step a\nb 2  // From b called from the test.feature directly\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : *<div class='sub-desc'><p>The context of the test function which has the <code>.Given</code> methods.</p>\n</div></li></ul></div><div class='members'></div></div>","meta":{}});